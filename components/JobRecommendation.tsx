"use client";
import { useState } from "react";
import MainCardLayout from "@/components/layout/MainCardLayout";

type Job = {
  id: number;
  title: string;
  description: string;
  location: string;
  tags: string[];
};

const mockJobs: Job[] = [
  {
    id: 1,
    title: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏û‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á",
    description: "‡∏ô‡∏±‡πà‡∏á‡πÅ‡∏û‡πá‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏Å‡∏î‡∏±‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô",
    location: "‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡πÅ‡∏Ñ",
    tags: ["‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô", "‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏≤", "‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ"],
  },
  {
    id: 2,
    title: "‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•",
    description: "‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    location: "‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏ô‡∏≤",
    tags: ["‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏≤"],
  },
  {
    id: 3,
    title: "‡∏û‡∏±‡∏ö‡∏ñ‡∏∏‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© (‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô)",
    description: "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ ‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏≤",
    location: "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
    tags: ["‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏≤", "‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ"],
  },
  {
    id: 4,
    title: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
    description: "‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô",
    location: "‡πÄ‡∏Ç‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß",
    tags: ["‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô"],
  },
];

const allFilters = ["‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô", "‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏≤", "‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ"];

export default function JobRecommendation() {
  const [activeFilters, setActiveFilters] = useState<string[]>([]);

  const toggleFilter = (filter: string) => {
    setActiveFilters((prev) =>
      prev.includes(filter)
        ? prev.filter((f) => f !== filter)
        : [...prev, filter]
    );
  };

  const filteredJobs = mockJobs.filter((job) =>
    activeFilters.length === 0
      ? true
      : activeFilters.every((filter) => job.tags.includes(filter))
  );

  return (
    <MainCardLayout>
      <h2 className="text-2xl font-bold flex items-center gap-2">
        ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      </h2>

      <p className="text-sm text-gray-300">
        ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô ‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ
      </p>

      {/* Filter */}
      <div className="flex gap-3 flex-wrap mb-4 mt-4">
        {allFilters.map((filter) => (
          <button
            key={filter}
            onClick={() => toggleFilter(filter)}
            className={`px-4 py-2 rounded-full text-sm border transition ${
              activeFilters.includes(filter)
                ? "bg-pink-600 border-pink-500"
                : "border-gray-400 hover:border-pink-500"
            }`}
          >
            {filter}
          </button>
        ))}
      </div>

      {/* Job Cards */}
      <div className="grid md:grid-cols-2 gap-4">
        {filteredJobs.length > 0 ? (
          filteredJobs.map((job) => (
            <div
              key={job.id}
              className="bg-white text-black p-4 rounded-xl shadow-md space-y-2"
            >
              <h3 className="text-lg font-semibold">{job.title}</h3>
              <p className="text-sm">{job.description}</p>
              <p className="text-xs text-gray-600">üìç {job.location}</p>
              <div className="flex flex-wrap gap-2">
                {job.tags.map((tag) => (
                  <span
                    key={tag}
                    className="text-xs bg-gray-200 text-gray-800 px-2 py-1 rounded-full"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          ))
        ) : (
          <p className="text-sm text-gray-400">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á</p>
        )}
      </div>
    </MainCardLayout>
  );
}
