"use client";

import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { useState } from "react";

const schema = yup.object({
  name: yup.string().required("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠"),
  skills: yup.string().required("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ"),
  location: yup.string().required("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"),
});

export default function JobForm() {
  const [listening, setListening] = useState(false);
  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm({ resolver: yupResolver(schema) });

  const onSubmit = (data: any) => {
    console.log("‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°:", data);
  };

  const startVoiceInput = (field: string) => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) return alert("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Voice Input");

    const recognition = new SpeechRecognition();
    recognition.lang = "th-TH";
    recognition.start();
    setListening(true);

    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setValue(field, transcript);
      setListening(false);
    };

    recognition.onerror = () => setListening(false);
  };

  return (
    <div className="max-w-md mx-auto mt-10 card bg-base-100 shadow-xl p-8">
      <h2 className="text-2xl font-bold text-center mb-6 flex items-center gap-2">
        üìÑ <span className="text-primary">‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô</span>
      </h2>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
        {/* Name */}
        <div>
          <label className="label font-semibold text-gray-700">‡∏ä‡∏∑‡πà‡∏≠</label>
          <div className="flex gap-2">
            <input
              {...register("name")}
              className="input input-bordered input-primary w-full bg-white"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            />
            <button
              type="button"
              onClick={() => startVoiceInput("name")}
              className="btn btn-secondary btn-sm"
            >üì¢</button>
          </div>
          {errors.name && <p className="text-error text-sm mt-1">{errors.name.message}</p>}
        </div>

        {/* Skills */}
        <div>
          <label className="label font-semibold text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ</label>
          <div className="flex gap-2">
            <input
              {...register("skills")}
              className="input input-bordered input-primary w-full bg-white"
              placeholder="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á"
            />
            <button
              type="button"
              onClick={() => startVoiceInput("skills")}
              className="btn btn-secondary btn-sm"
            >üì¢</button>
          </div>
          {errors.skills && <p className="text-error text-sm mt-1">{errors.skills.message}</p>}
        </div>

        {/* Location */}
        <div>
          <label className="label font-semibold text-gray-700">‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
          <div className="flex gap-2">
            <input
              {...register("location")}
              className="input input-bordered input-primary w-full bg-white"
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Ç‡∏ï‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢"
            />
            <button
              type="button"
              onClick={() => startVoiceInput("location")}
              className="btn btn-secondary btn-sm"
            >üì¢</button>
          </div>
          {errors.location && <p className="text-error text-sm mt-1">{errors.location.message}</p>}
        </div>

        {/* Submit */}
        <div>
          <button type="submit" className="btn btn-primary w-full mt-4 text-white text-lg font-bold">
            üß† ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          </button>
        </div>
      </form>
    </div>
  );
}